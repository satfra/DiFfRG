template <typename REG> class ZA_kernel
{
public:
  template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8,
            typename T9, typename T10>
  static __forceinline__ __host__ __device__ auto
  kernel(const double q, const double cos1, const double k, const T1 p, const T2 &ZA3, const T3 &ZAcbc, const T4 &ZA4SP,
         const T5 &ZA4tadpole, const T6 &dtZc, const T7 &Zc, const T8 &dtZA, const T9 &ZA, const T10 m2A)
  {
    // optimization definitions
    const double DiFfRGREPL1 = dtZA(pow(1. + powr<6>(k), 0.16666666666666666));
    const double DiFfRGREPL2 = dtZc(k);
    const double DiFfRGREPL3 = RB(powr<2>(k), powr<2>(q));
    const double DiFfRGREPL4 = RB(powr<2>(k), -2. * cos1 * p * q + powr<2>(p) + powr<2>(q));
    const double DiFfRGREPL5 = RBdot(powr<2>(k), powr<2>(q));
    const double DiFfRGREPL6 = ZA(pow(1. + powr<6>(k), 0.16666666666666666));
    const double DiFfRGREPL7 = ZA(1.02 * pow(1. + powr<6>(k), 0.16666666666666666));
    const double DiFfRGREPL8 = ZA(q);
    const double DiFfRGREPL9 = Zc(k);
    const double DiFfRGREPL10 = Zc(1.02 * k);
    const double DiFfRGREPL11 = Zc(q);

    // flow
    return powr<-2>(p) *
           (-4. * (-1. + powr<2>(cos1)) *
                (-6. * cos1 * q * powr<3>(p) + 3. * powr<4>(p) + (8. + powr<2>(cos1)) * powr<2>(p) * powr<2>(q) -
                 6. * cos1 * p * powr<3>(q) + 3. * powr<4>(q)) *
                (DiFfRGREPL5 * DiFfRGREPL6 + DiFfRGREPL3 * (DiFfRGREPL1 + 50. * (-1. * DiFfRGREPL6 + DiFfRGREPL7) *
                                                                              powr<6>(k) * powr<-1>(1. + powr<6>(k)))) *
                powr<-1>(-2. * cos1 * p * q + powr<2>(p) + powr<2>(q)) *
                powr<-2>(DiFfRGREPL3 * DiFfRGREPL6 + DiFfRGREPL8 * powr<2>(q)) *
                powr<-1>(DiFfRGREPL4 * DiFfRGREPL6 + (-2. * cos1 * p * q + powr<2>(p) + powr<2>(q)) *
                                                         ZA((sqrt(-2. * cos1 * p * q + powr<2>(p) + powr<2>(q))))) *
                ZA3(0.816496580927726 * (sqrt(-1. * cos1 * p * q + powr<2>(p) + powr<2>(q))),
                    powr<-1>(-1. * cos1 * p * q + powr<2>(p) + powr<2>(q)) *
                        (sqrt(-2. * cos1 * q * powr<3>(p) + powr<4>(p) +
                              (-1. + 4. * powr<2>(cos1)) * powr<2>(p) * powr<2>(q) - 2. * cos1 * p * powr<3>(q) +
                              powr<4>(q))),
                    atan2(1.7320508075688772 * q * (-2. * cos1 * p + q),
                          -2. * cos1 * p * q + 2. * powr<2>(p) - 1. * powr<2>(q))) *
                ZA3(0.816496580927726 * (sqrt(-1. * cos1 * p * q + powr<2>(p) + powr<2>(q))),
                    powr<-1>(-1. * cos1 * p * q + powr<2>(p) + powr<2>(q)) *
                        (sqrt(-2. * cos1 * q * powr<3>(p) + powr<4>(p) +
                              (-1. + 4. * powr<2>(cos1)) * powr<2>(p) * powr<2>(q) - 2. * cos1 * p * powr<3>(q) +
                              powr<4>(q))),
                    atan2(1.7320508075688772 * (-1. * powr<2>(p) + powr<2>(q)),
                          4. * cos1 * p * q - 1. * powr<2>(p) - 1. * powr<2>(q))) +
            (-7. + powr<2>(cos1)) *
                (DiFfRGREPL5 * DiFfRGREPL6 + DiFfRGREPL3 * (DiFfRGREPL1 + 50. * (-1. * DiFfRGREPL6 + DiFfRGREPL7) *
                                                                              powr<6>(k) * powr<-1>(1. + powr<6>(k)))) *
                powr<-2>(DiFfRGREPL3 * DiFfRGREPL6 + DiFfRGREPL8 * powr<2>(q)) *
                ZA4tadpole(0.4082482904638631 * (sqrt(4. * powr<2>(p) + 3. * powr<2>(q))),
                           powr<-1>(4. * powr<2>(p) + 3. * powr<2>(q)) *
                               (sqrt(48. * powr<2>(cos1) * powr<2>(p) * powr<2>(q) +
                                     powr<2>(4. * powr<2>(p) - 3. * powr<2>(q)))),
                           atan2(-6.928203230275509 * cos1 * p * q, 4. * powr<2>(p) - 3. * powr<2>(q))) +
            (DiFfRGREPL3 * (50. * DiFfRGREPL10 + DiFfRGREPL2 - 50. * DiFfRGREPL9) + DiFfRGREPL5 * DiFfRGREPL9) *
                (-1. + powr<2>(cos1)) * powr<2>(q) * powr<-2>(DiFfRGREPL3 * DiFfRGREPL9 + DiFfRGREPL11 * powr<2>(q)) *
                powr<-1>(DiFfRGREPL4 * DiFfRGREPL9 + (-2. * cos1 * p * q + powr<2>(p) + powr<2>(q)) *
                                                         Zc((sqrt(-2. * cos1 * p * q + powr<2>(p) + powr<2>(q))))) *
                ZAcbc(0.816496580927726 * (sqrt(-1. * cos1 * p * q + powr<2>(p) + powr<2>(q))),
                      powr<-1>(-1. * cos1 * p * q + powr<2>(p) + powr<2>(q)) *
                          (sqrt(-2. * cos1 * q * powr<3>(p) + powr<4>(p) +
                                (-1. + 4. * powr<2>(cos1)) * powr<2>(p) * powr<2>(q) - 2. * cos1 * p * powr<3>(q) +
                                powr<4>(q))),
                      atan2(-1.7320508075688772 * p * (p - 2. * cos1 * q),
                            -2. * cos1 * p * q - 1. * powr<2>(p) + 2. * powr<2>(q))) *
                ZAcbc(0.816496580927726 * (sqrt(-1. * cos1 * p * q + powr<2>(p) + powr<2>(q))),
                      powr<-1>(-1. * cos1 * p * q + powr<2>(p) + powr<2>(q)) *
                          (sqrt(-2. * cos1 * q * powr<3>(p) + powr<4>(p) +
                                (-1. + 4. * powr<2>(cos1)) * powr<2>(p) * powr<2>(q) - 2. * cos1 * p * powr<3>(q) +
                                powr<4>(q))),
                      atan2(1.7320508075688772 * p * (p - 2. * cos1 * q),
                            -2. * cos1 * p * q - 1. * powr<2>(p) + 2. * powr<2>(q))) +
            (DiFfRGREPL3 * (50. * DiFfRGREPL10 + DiFfRGREPL2 - 50. * DiFfRGREPL9) + DiFfRGREPL5 * DiFfRGREPL9) *
                (-1. + powr<2>(cos1)) * powr<2>(q) * powr<-2>(DiFfRGREPL3 * DiFfRGREPL9 + DiFfRGREPL11 * powr<2>(q)) *
                powr<-1>(DiFfRGREPL9 * RB(powr<2>(k), 2. * cos1 * p * q + powr<2>(p) + powr<2>(q)) +
                         (2. * cos1 * p * q + powr<2>(p) + powr<2>(q)) *
                             Zc((sqrt(2. * cos1 * p * q + powr<2>(p) + powr<2>(q))))) *
                ZAcbc(0.816496580927726 * (sqrt(cos1 * p * q + powr<2>(p) + powr<2>(q))),
                      (sqrt(1. + 3. * (-1. + powr<2>(cos1)) * powr<2>(p) * powr<2>(q) *
                                     powr<-2>(cos1 * p * q + powr<2>(p) + powr<2>(q)))),
                      atan2(-1.7320508075688772 * p * (p + 2. * cos1 * q),
                            2. * cos1 * p * q - 1. * powr<2>(p) + 2. * powr<2>(q))) *
                ZAcbc(0.816496580927726 * (sqrt(cos1 * p * q + powr<2>(p) + powr<2>(q))),
                      (sqrt(1. + 3. * (-1. + powr<2>(cos1)) * powr<2>(p) * powr<2>(q) *
                                     powr<-2>(cos1 * p * q + powr<2>(p) + powr<2>(q)))),
                      atan2(1.7320508075688772 * p * (p + 2. * cos1 * q),
                            2. * cos1 * p * q - 1. * powr<2>(p) + 2. * powr<2>(q))));
  }

  template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8,
            typename T9, typename T10>
  static __forceinline__ __host__ __device__ auto constant(const double k, const T1 p, const T2 &ZA3, const T3 &ZAcbc,
                                                           const T4 &ZA4SP, const T5 &ZA4tadpole, const T6 &dtZc,
                                                           const T7 &Zc, const T8 &dtZA, const T9 &ZA, const T10 m2A)
  {
    // flow
    return 0.;
  }

private:
  static __forceinline__ __device__ __host__ auto RB(const auto k2, const auto p2) { return REG::RB(k2, p2); }
  static __forceinline__ __device__ __host__ auto RF(const auto k2, const auto p2) { return REG::RF(k2, p2); }

  static __forceinline__ __device__ __host__ auto RBdot(const auto k2, const auto p2) { return REG::RBdot(k2, p2); }
  static __forceinline__ __device__ __host__ auto RFdot(const auto k2, const auto p2) { return REG::RFdot(k2, p2); }

  static __forceinline__ __device__ __host__ auto dq2RB(const auto k2, const auto p2) { return REG::dq2RB(k2, p2); }
  static __forceinline__ __device__ __host__ auto dq2RF(const auto k2, const auto p2) { return REG::dq2RF(k2, p2); }
};